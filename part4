```{r}
# part(4)
#  Clean and preprocess data:
# - Clean column names (janitor::clean_names)
# - Convert 'grade' and 'pathway' to factors with specific levels
# - Create a binary variable 'helpful_bin' indicating if Q6 response >= 4
dat <- dat_raw %>%
  clean_names() %>%
  mutate(
    grade = factor(grade, levels=c("G9","G10","G11","G12")),
    pathway = fct_relevel(factor(pathway), "Mainstream","AP","IB","Undecided"),
    helpful_bin = q6_helpfulness >= 4  # primary analysis: ≥4 = “helpful”
  )
```

```{r}
# Grade distribution map
grade_plot <- dat %>%
  count(grade) %>%
  mutate(percent = n / sum(n)) %>%
  ggplot(aes(x = grade, y = percent, fill = grade)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = scales::percent(percent, accuracy = 0.1)), 
            vjust = -0.5, size = 3.5) +
  scale_y_continuous(labels = scales::percent_format(), 
                     limits = c(0, 0.35)) +
  labs(title = "Grade Distribution of Survey Respondents",
       x = "Grade", 
       y = "Percentage") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

grade_plot
```

```{r}
# Needs Analysis Chart
need_plot <- dat %>%
  count(q11_need) %>%
  mutate(percent = n / sum(n),
         q11_need = fct_reorder(q11_need, percent)) %>%
  ggplot(aes(x = q11_need, y = percent, fill = q11_need)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = scales::percent(percent, accuracy = 0.1)),
            hjust = -0.1, size = 3.5) +
  scale_y_continuous(labels = scales::percent_format(),
                     limits = c(0, 0.35)) +
  coord_flip() + # Flip coordinates for better readability of long text
  labs(title = "Most Requested Handbook Additions",
       x = "Request Type",
       y = "Percentage") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

need_plot
```
```{r}
# Reshape data to plot distributions of multiple questions
likert_long <- dat %>%
  select(id, pathway, q6_helpfulness:q10_fair_balance) %>%
  pivot_longer(cols = q6_helpfulness:q10_fair_balance,
               names_to = "question",
               values_to = "rating") %>%
  mutate(question = factor(question,
                           labels = c("Q6: Helpfulness", "Q7: Rigor Clarity",
                                      "Q8: Decision Support", "Q9: Credit Info",
                                      "Q10: Fair Balance")))

# Create violin-boxplot combination chart
likert_plot <- ggplot(likert_long, aes(x = question, y = rating, fill = question)) +
  geom_violin(alpha = 0.6, show.legend = FALSE) +
  geom_boxplot(width = 0.2, alpha = 0.8, show.legend = FALSE) +
  stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "red") +
  labs(title = "Score Distribution Across Evaluation Dimensions",
       x = "Evaluation Questions",
       y = "Rating (1-5)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 15, hjust = 1),
        plot.title = element_text(hjust = 0.5))

likert_plot
```

```{r}
# Calculate correlation matrix
cor_matrix <- dat %>%
  select(q6_helpfulness:q10_fair_balance) %>%
  cor(use = "complete.obs")

# Create correlation heatmap
cor_plot <- cor_matrix %>%
  as.data.frame() %>%
  tibble::rownames_to_column("var1") %>%  
  pivot_longer(cols = -var1, names_to = "var2", values_to = "correlation") %>%
  mutate(
    var1 = factor(var1, labels = c("Helpfulness", "Rigor Clarity", 
                                   "Decision Support", "Credit Info", "Fair Balance")),
    var2 = factor(var2, labels = c("Helpfulness", "Rigor Clarity", 
                                   "Decision Support", "Credit Info", "Fair Balance"))
  ) %>%
  ggplot(aes(x = var1, y = var2, fill = correlation)) +
  geom_tile(color = "white") +  
  geom_text(aes(label = round(correlation, 2)), color = "black", size = 4) +  
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation Coefficient") +
  labs(title = "Correlation Between Evaluation Dimensions",
       x = "", y = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5))

cor_plot
```


